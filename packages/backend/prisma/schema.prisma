generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

/// This table has subclasses and requires additional setup for migrations. Visit https://pris.ly/d/table-inheritance for more info.
model base_entity {
  id         Int      @id(map: "entity_pkey") @default(autoincrement())
  uuid       String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)

  @@ignore
}

/// This table has subclasses and requires additional setup for migrations. Visit https://pris.ly/d/table-inheritance for more info.
model base_roles {
  id          Int     @id(map: "roles_id_pkey") @db.SmallInt
  uuid        String  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @unique(map: "roles_name_ukey")
  description String?
  permissions Json

  @@ignore
}

model project_members {
  id            Int           @id @default(autoincrement())
  uuid          String        @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime      @default(now()) @db.Timestamp(6)
  user_id       Int
  project_id    Int
  role_id       Int           @db.SmallInt
  projects      projects      @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "project_id_pkey")
  project_roles project_roles @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_id_pkey")
  users         users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_id_pkey")

  @@unique([user_id, project_id], map: "project_members_ukey")
}

model project_roles {
  id              Int               @id @db.SmallInt
  uuid            String            @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  description     String?
  permissions     Json
  project_members project_members[]
}

model projects {
  id                    Int                @id @default(autoincrement())
  uuid                  String             @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at            DateTime           @default(now()) @db.Timestamp(6)
  team_id               Int
  name                  String
  description           String?
  is_archived           Boolean            @default(false)
  updated_at            DateTime           @default(now()) @db.Timestamp(6)
  pending_deletion      Boolean            @default(false)
  deletion_scheduled_at DateTime?          @db.Timestamp(6)
  platform_id           Int                @db.SmallInt
  dsn                   String?
  project_members       project_members[]
  project_versions      project_versions[]
  project_platforms     project_platforms  @relation(fields: [platform_id], references: [id], onDelete: NoAction, map: "platform_id-pkey")
  teams                 teams              @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "team_id_pkey")

  @@unique([team_id, name], map: "projects-ukey")
  @@index([team_id], map: "idx_projects_team_id")
}

model teams {
  id                 Int                  @id @default(autoincrement())
  uuid               String               @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  name               String
  slug               String               @unique(map: "teams_slug_ukey")
  projects           projects[]
  team_join_requests team_join_requests[]
  users              users[]
}

model users {
  id                            Int                  @id @default(autoincrement())
  uuid                          String               @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                    DateTime             @default(now()) @db.Timestamp(6)
  name                          String
  email                         String               @unique(map: "users_email_ukey")
  password                      String
  team_id                       Int?
  team_role_id                  Int?
  project_members               project_members[]
  team_join_requests_as_inviter team_join_requests[] @relation("inviter")
  team_join_requests            team_join_requests[]
  teams                         teams?               @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_id_pkey")
  team_roles                    team_roles?          @relation(fields: [team_role_id], references: [id], onDelete: NoAction, map: "team_role_id_pkey")
}

model team_roles {
  id                 Int                  @id(map: "teams_roles_pkey") @db.SmallInt
  uuid               String               @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  description        String?
  permissions        Json
  team_join_requests team_join_requests[]
  users              users[]
}

model team_join_requests {
  id                        Int                       @id @default(autoincrement())
  uuid                      String                    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                DateTime                  @default(now()) @db.Timestamp(6)
  user_id                   Int
  team_id                   Int
  type_id                   Int                       @db.SmallInt
  status_id                 Int                       @db.SmallInt
  created_by                Int?
  role_id                   Int                       @db.SmallInt
  dispose_at                DateTime?                 @db.Timestamp(6)
  inviter                   users?                    @relation("inviter", fields: [created_by], references: [id], onUpdate: NoAction, map: "creacted_by_pkey")
  team_roles                team_roles                @relation(fields: [role_id], references: [id], onDelete: NoAction, map: "role_id_pkey")
  team_join_requests_status team_join_requests_status @relation(fields: [status_id], references: [id], onDelete: Cascade, map: "status_id-pkey")
  teams                     teams                     @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "team_id_pkey")
  team_join_requests_type   team_join_requests_type   @relation(fields: [type_id], references: [id], onDelete: Cascade, map: "type_id")
  users                     users                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_id_pkey")
}

model team_join_requests_status {
  id                 Int                  @id @db.SmallInt
  uuid               String               @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text               String
  team_join_requests team_join_requests[]
}

model team_join_requests_type {
  id                 Int                  @id @db.SmallInt
  uuid               String               @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text               String
  team_join_requests team_join_requests[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model project_platforms {
  id                     Int                    @id(map: "project_platform_pkey") @db.SmallInt
  uuid                   String                 @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String
  type_id                Int                    @db.SmallInt
  install_command        String                 @map("install-command")
  configuration          String
  project_platform_types project_platform_types @relation(fields: [type_id], references: [id], onDelete: NoAction, map: "project_platforms-type_id-pkey")
  projects               projects[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model project_versions {
  id          Int       @id @default(autoincrement())
  project_id  Int
  version     String
  released_at DateTime? @default(now()) @db.Timestamp(6)
  is_stable   Boolean   @default(false)
  is_latest   Boolean   @default(false)
  changelog   String?
  metadata    Json      @default("{}")
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  projects    projects  @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "project_versions-project_id-pkey")

  @@unique([project_id, version], map: "project_versions-ukey")
}

model project_platform_types {
  id                Int                 @id @db.SmallInt
  name              String
  description       String?
  project_platforms project_platforms[]
}
